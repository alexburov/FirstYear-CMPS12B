head	1.4;
access;
symbols;
locks;
comment	@ * @;


1.4
date	2015.02.20.23.44.21;	author -;	state -;
branches;
next	1.3;

1.3
date	2015.02.20.23.44.01;	author -;	state -;
branches;
next	1.2;

1.2
date	2015.02.20.23.26.54;	author -;	state -;
branches;
next	1.1;

1.1
date	2015.02.20.23.00.25;	author -;	state -;
branches;
next	;


desc
@@


1.4
log
@-
@
text
@// $Id: main.c,v 1.3 2015-02-20 15:44:01-08 - - $

#include <assert.h>
#include <errno.h>
#include <libgen.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "queue.h"

char *execname = NULL;
int exit_status = EXIT_SUCCESS;

void putinqueue (queue *the_queue, FILE *input, char *filename) {
   char buffer[1024];
   for (int linenr = 1; ; ++linenr) {
      char *linepos = fgets (buffer, sizeof buffer, input);
      if (linepos == NULL) break;
      linepos = strchr (buffer, '\n');
      if (linepos == NULL) {
         fflush (NULL);
         fprintf (stderr, "%s: %s[%d]: unterminated line\n",
                  execname, filename, linenr);
         fflush (NULL);
         exit_status = EXIT_FAILURE;
      }else {
         *linepos = '\0';
      }
      linepos = strdup (buffer);
      assert (linepos != NULL);
      insert_queue (the_queue, linepos);
   }
}

void putfileinqueue (queue *the_queue, char *filename) {
   FILE *input = fopen (filename, "r");
   if (input == NULL) {
      fflush (NULL);
      fprintf (stderr, "%s: %s: %s\n",
               execname, filename, strerror (errno));
      fflush (NULL);
      exit_status = EXIT_FAILURE;
   }else {
      putinqueue (the_queue, input, filename);
      fclose (input);
   }
}


int main (int argc, char **argv) {
   execname = basename (argv[0]);
   queue *the_queue = new_queue();

   if (argc < 2) {
      putinqueue (the_queue, stdin, "-");
   }else {
      for (int argi = 1; argi < argc; ++argi) {
         if (strcmp (argv[argi], "-") == 0) {
            putinqueue (the_queue, stdin, "-");
         }else {
            putfileinqueue (the_queue, argv[argi]);
         }
      }
   }

   while (! isempty_queue (the_queue)) {
      queue_item_t item = remove_queue(the_queue);
      printf ("%s\n", item);
      free(item);
   }

   free_queue(the_queue);

   return exit_status;
}

@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: main.c,v 1.2 2015-02-20 15:26:54-08 - - $
d68 1
a68 1
      queue_item_t *item = remove_queue(the_queue);
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: main.c,v 1.1 2015-02-20 15:00:25-08 - - $
d50 1
a50 1

d68 3
a70 1
      printf ("%s\n", remove_queue (the_queue));
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: main.c,v 1.10 2013-02-15 17:17:42-08 - - $
d71 2
@

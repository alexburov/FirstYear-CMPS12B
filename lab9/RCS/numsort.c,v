head	1.12;
access;
symbols;
locks;
comment	@ * @;


1.12
date	2015.03.12.02.34.50;	author -;	state -;
branches;
next	1.11;

1.11
date	2015.03.11.22.21.45;	author -;	state -;
branches;
next	1.10;

1.10
date	2015.03.11.22.20.41;	author -;	state -;
branches;
next	1.9;

1.9
date	2015.03.11.22.20.24;	author -;	state -;
branches;
next	1.8;

1.8
date	2015.03.11.22.12.54;	author -;	state -;
branches;
next	1.7;

1.7
date	2015.03.11.22.12.37;	author -;	state -;
branches;
next	1.6;

1.6
date	2015.03.11.22.07.06;	author -;	state -;
branches;
next	1.5;

1.5
date	2015.03.11.22.06.14;	author -;	state -;
branches;
next	1.4;

1.4
date	2015.03.11.03.41.55;	author -;	state -;
branches;
next	1.3;

1.3
date	2015.03.11.03.41.10;	author -;	state -;
branches;
next	1.2;

1.2
date	2015.03.11.03.36.11;	author -;	state -;
branches;
next	1.1;

1.1
date	2015.03.11.01.00.36;	author -;	state -;
branches;
next	;


desc
@@


1.12
log
@-
@
text
@// $Id$
// Author Olexiy Burov, oburov@@ucsc.edu

#include <stdlib.h>
#include <stdio.h>
#include "inssort.h"

// Double compare function
int double_cmp(const void* this,const void* that) {
   double a = *(double*)this;
   double b = *(double*)that;
   return (a > b) - (a < b);
}

int main() {
   double array[0x1000];
   // nelem keeps track of the number of elements and indexes.
   int nelem = 0;
   while (scanf("%lf",&array[nelem]) && nelem < 0x1000) {
      nelem++;
   }
   // Sort it.
   inssort(array, nelem, sizeof *array, double_cmp);
   // Print it in the specified format.
   for (int index = 0; index < nelem; ++index) {
      printf("%20.15g\n", array[index]);
   }
}
@


1.11
log
@-
@
text
@d1 3
d8 1
d17 1
d22 1
d24 1
@


1.10
log
@-
@
text
@d19 1
a19 1
      printf("%lf\n", array[index]);
@


1.9
log
@-
@
text
@d15 1
a15 1
      index++;
@


1.8
log
@-
@
text
@d13 2
a14 2
   int index = 0;
   while (scanf("%lf",&array[index]) && index < 0x1000) {
d17 3
a19 3
   inssort(array, index, sizeof *array, double_cmp);
   for (int i = 0; i < index; ++i) {
      printf("%lf\n", array[i]);
@


1.7
log
@-
@
text
@d17 1
a17 1
   inssort(array, index, sizeof *array, nuncmp);
@


1.6
log
@-
@
text
@d5 1
a5 1
int nuncmp(const void* this,const void* that) {
a8 1

@


1.5
log
@-
@
text
@a15 1
      printf("READ: %lf, INDEX: %d\n",array[index],index);
@


1.4
log
@-
@
text
@d21 1
a21 1
      printf("ITEM: %lf, INDEX: %d\n", array[i],i);
@


1.3
log
@-
@
text
@d5 1
a5 1
int nuncmp(void* this, void* that) {
@


1.2
log
@-
@
text
@d5 7
d19 1
@


1.1
log
@-
@
text
@d12 3
@

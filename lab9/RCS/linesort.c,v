head	1.12;
access;
symbols;
locks;
comment	@ * @;


1.12
date	2015.03.12.02.34.51;	author -;	state -;
branches;
next	1.11;

1.11
date	2015.03.11.22.29.19;	author -;	state -;
branches;
next	1.10;

1.10
date	2015.03.11.22.18.44;	author -;	state -;
branches;
next	1.9;

1.9
date	2015.03.11.22.16.24;	author -;	state -;
branches;
next	1.8;

1.8
date	2015.03.11.22.14.19;	author -;	state -;
branches;
next	1.7;

1.7
date	2015.03.11.22.13.18;	author -;	state -;
branches;
next	1.6;

1.6
date	2015.03.11.22.12.54;	author -;	state -;
branches;
next	1.5;

1.5
date	2015.03.11.22.07.07;	author -;	state -;
branches;
next	1.4;

1.4
date	2015.03.11.22.05.09;	author -;	state -;
branches;
next	1.3;

1.3
date	2015.03.11.21.45.30;	author -;	state -;
branches;
next	1.2;

1.2
date	2015.03.11.21.45.14;	author -;	state -;
branches;
next	1.1;

1.1
date	2015.03.11.04.19.37;	author -;	state -;
branches;
next	;


desc
@@


1.12
log
@-
@
text
@// $Id$
// Author Olexiy Burov, oburov@@ucsc.edu

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "inssort.h"

// String compare function.
int string_cmp(const void *this, const void *that) {
   char **str1 = (char **)this;
   char **str2 = (char **)that;
   return strcmp(*str1,*str2);
}
int main() {
   char *array[0x1000];
   char buffer[0x1000];
   // nelem keeps track of the number of elements and indexes.
   int nelem = 0;
   for (;nelem < 0x1000;++nelem) {
      // We read the string
      char *buf = fgets (buffer, sizeof buffer, stdin);
      if (buf == NULL) break;
      // Change '\n' to '\0'
      size_t length = strlen(buf) - 1;
      if (buf[length] == '\n')
          buf[length] = '\0';
      // Duplicate at index
      array[nelem] = strdup(buf);
   }
   // Sort it.
   inssort(array, nelem, sizeof *array, string_cmp);
   // Print one string per line.
   for (int index = 0; index < nelem; ++index) {
      printf("%s\n",array[index]);
      free(array[index]);
   }
}
@


1.11
log
@-
@
text
@d1 3
d9 1
d18 1
d21 1
d24 1
d28 1
d31 1
d33 1
@


1.10
log
@-
@
text
@d26 1
@


1.9
log
@-
@
text
@d14 2
a15 2
   int index = 0;
   for (;index < 0x1000;++index) {
d21 1
a21 1
      array[index] = strdup(buf);
d23 3
a25 3
   inssort(array, index, sizeof *array, string_cmp);
   for (int i = 0; i < index; ++i) {
      printf("WORD: %s, INDEX: %d\n",array[i],i);
@


1.8
log
@-
@
text
@d7 3
a9 3
   char *str1 = (char *)this;
   char *str2 = (char *)that;
   return strcmp(str2,str1);
@


1.7
log
@-
@
text
@d9 1
a9 1
   return strcmp(str1,str2);
@


1.6
log
@-
@
text
@d6 1
a6 1
string_cmp(const void *this, const void *that) {
@


1.5
log
@-
@
text
@d6 5
d23 1
@


1.4
log
@-
@
text
@d4 1
@


1.3
log
@-
@
text
@d9 1
a9 1
   for (;index < 10;++index) {
d17 3
@


1.2
log
@-
@
text
@d9 1
a9 1
   for (;index < 0x1000;++index) {
@


1.1
log
@-
@
text
@d9 1
a9 1
   for (;;) {
@

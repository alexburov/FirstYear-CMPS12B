Script started on Mon 09 Feb 2015 09:31:38 PM PST
[?1034hbash-4.1$ mk uninit.c
CSOURCE=environ.c EXECBIN=environ
+ cid + environ.c
+ checksource environ.c
+ gcc -g -O0 -Wall -Wextra -std=gnu99 environ.c -o environ -lm
+ tee environ.c.log
environ.c: In function â€˜mainâ€™:
environ.c:6:14: warning: unused parameter â€˜argcâ€™ [-Wunused-parameter]
 int main(int argc, char **argv)
              ^
environ.c:6:27: warning: unused parameter â€˜argvâ€™ [-Wunused-parameter]
 int main(int argc, char **argv)
                           ^
+ set +x
============================================================
CSOURCE=err2.c EXECBIN=err2
+ cid + err2.c
+ checksource err2.c
+ gcc -g -O0 -Wall -Wextra -std=gnu99 err2.c -o err2 -lm
+ tee err2.c.log
err2.c: In function â€˜mainâ€™:
err2.c:6:14: warning: initialization makes pointer from integer without a cast [enabled by default]
    char *p = 20;
              ^
+ set +x
============================================================
CSOURCE=err.c EXECBIN=err
+ cid + err.c
+ checksource err.c
+ gcc -g -O0 -Wall -Wextra -std=gnu99 err.c -o err -lm
+ tee err.c.log
err.c: In function â€˜fooâ€™:
err.c:6:9: warning: unused variable â€˜pâ€™ [-Wunused-variable]
    int *p = &x;
         ^
err.c: In function â€˜barâ€™:
err.c:11:11: warning: â€˜aâ€™ is used uninitialized in this function [-Wuninitialized]
    printf ("%d %p\n", a, p);
           ^
err.c:11:11: warning: â€˜pâ€™ is used uninitialized in this function [-Wuninitialized]
+ set +x
============================================================
CSOURCE=list1.c EXECBIN=list1
+ cid + list1.c
+ checksource list1.c
+ gcc -g -O0 -Wall -Wextra -std=gnu99 list1.c -o list1 -lm
+ tee list1.c.log
list1.c: In function â€˜mainâ€™:
list1.c:15:7: warning: implicit declaration of function â€˜mallocâ€™ [-Wimplicit-function-declaration]
       node *node = malloc (sizeof (struct node));
       ^
list1.c:15:20: warning: incompatible implicit declaration of built-in function â€˜mallocâ€™ [enabled by default]
       node *node = malloc (sizeof (struct node));
                    ^
list1.c:12:15: warning: unused parameter â€˜argcâ€™ [-Wunused-parameter]
 int main (int argc, char **argv) {
               ^
+ set +x
============================================================
CSOURCE=list2.c EXECBIN=list2
+ cid + list2.c
+ checksource list2.c
+ gcc -g -O0 -Wall -Wextra -std=gnu99 list2.c -o list2 -lm
+ tee list2.c.log
list2.c: In function â€˜mainâ€™:
list2.c:13:15: warning: unused parameter â€˜argcâ€™ [-Wunused-parameter]
 int main (int argc, char **argv) {
               ^
+ set +x
============================================================
CSOURCE=list3.c EXECBIN=list3
+ cid + list3.c
+ checksource list3.c
+ gcc -g -O0 -Wall -Wextra -std=gnu99 list3.c -o list3 -lm
+ tee list3.c.log
list3.c: In function â€˜mainâ€™:
list3.c:13:15: warning: unused parameter â€˜argcâ€™ [-Wunused-parameter]
 int main (int argc, char **argv) {
               ^
+ set +x
============================================================
CSOURCE=list4.c EXECBIN=list4
+ cid + list4.c
+ checksource list4.c
+ gcc -g -O0 -Wall -Wextra -std=gnu99 list4.c -o list4 -lm
+ tee list4.c.log
list4.c: In function â€˜mainâ€™:
list4.c:20:15: warning: unused parameter â€˜argcâ€™ [-Wunused-parameter]
 int main (int argc, char **argv) {
               ^
+ set +x
============================================================
CSOURCE=malloc.c EXECBIN=malloc
+ cid + malloc.c
+ checksource malloc.c
+ gcc -g -O0 -Wall -Wextra -std=gnu99 malloc.c -o malloc -lm
+ tee malloc.c.log
malloc.c: In function â€˜mainâ€™:
malloc.c:12:15: warning: unused parameter â€˜argcâ€™ [-Wunused-parameter]
 int main (int argc, char **argv) {
               ^
malloc.c:12:28: warning: unused parameter â€˜argvâ€™ [-Wunused-parameter]
 int main (int argc, char **argv) {
                            ^
+ set +x
============================================================
CSOURCE=uninit.c EXECBIN=uninit
+ cid + uninit.c
+ checksource uninit.c
+ gcc -g -O0 -Wall -Wextra -std=gnu99 uninit.c -o uninit -lm
+ tee uninit.c.log
uninit.c: In function â€˜mainâ€™:
uninit.c:6:15: warning: unused parameter â€˜argcâ€™ [-Wunused-parameter]
 int main (int argc, char **argv) {
               ^
uninit.c:6:28: warning: unused parameter â€˜argvâ€™ [-Wunused-parameter]
 int main (int argc, char **argv) {
                            ^
uninit.c:8:11: warning: â€˜pointerâ€™ is used uninitialized in this function [-Wuninitialized]
    printf ("pointer=%p\n", pointer);
           ^
uninit.c:11:11: warning: â€˜fooâ€™ is used uninitialized in this function [-Wuninitialized]
    printf ("foo=%d\n", foo);
           ^
+ set +x
============================================================
bash-4.1$ valgrind uninit
==21225== Memcheck, a memory error detector
==21225== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==21225== Using Valgrind-3.9.0 and LibVEX; rerun with -h for copyright info
==21225== Command: uninit
==21225== 
==21225== Conditional jump or move depends on uninitialised value(s)
==21225==    at 0x3903245688: vfprintf (vfprintf.c:1640)
==21225==    by 0x390324F189: printf (printf.c:35)
==21225==    by 0x400544: main (uninit.c:8)
==21225== 
pointer=(nil)
==21225== Use of uninitialised value of size 8
==21225==    at 0x400549: main (uninit.c:9)
==21225== 
==21225== Invalid read of size 4
==21225==    at 0x400549: main (uninit.c:9)
==21225==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==21225== 
==21225== 
==21225== Process terminating with default action of signal 11 (SIGSEGV)
==21225==  Access not within mapped region at address 0x0
==21225==    at 0x400549: main (uninit.c:9)
==21225==  If you believe this happened as a result of a stack
==21225==  overflow in your program's main thread (unlikely but
==21225==  possible), you can try to increase the size of the
==21225==  main thread stack using the --main-stacksize= flag.
==21225==  The main thread stack size used in this run was 10485760.
==21225== 
==21225== HEAP SUMMARY:
==21225==     in use at exit: 0 bytes in 0 blocks
==21225==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==21225== 
==21225== All heap blocks were freed -- no leaks are possible
==21225== 
==21225== For counts of detected and suppressed errors, rerun with: -v
==21225== Use --track-origins=yes to see where uninitialised values come from
==21225== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 6 from 6)
Segmentation fault (core dumped)
bash-4.1$ echo $?
139
bash-4.1$ pstatus 139
pstatus: 0x008B TERMINATED 11: Segmentation fault (core dumped)
bash-4.1$ exit
exit

Script done on Mon 09 Feb 2015 09:32:24 PM PST

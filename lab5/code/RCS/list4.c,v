head	1.23;
access;
symbols;
locks;
comment	@ * @;


1.23
date	2015.02.11.05.31.56;	author -;	state -;
branches;
next	1.22;

1.22
date	2015.02.11.05.31.06;	author -;	state -;
branches;
next	1.21;

1.21
date	2015.02.11.05.29.15;	author -;	state -;
branches;
next	1.20;

1.20
date	2015.02.11.05.27.51;	author -;	state -;
branches;
next	1.19;

1.19
date	2015.02.11.04.13.09;	author -;	state -;
branches;
next	1.18;

1.18
date	2015.02.11.04.05.27;	author -;	state -;
branches;
next	1.17;

1.17
date	2015.02.06.18.34.32;	author -;	state -;
branches;
next	1.16;

1.16
date	2015.02.06.06.13.00;	author -;	state -;
branches;
next	1.15;

1.15
date	2015.02.06.01.49.21;	author -;	state -;
branches;
next	1.14;

1.14
date	2015.02.06.00.58.12;	author -;	state -;
branches;
next	1.13;

1.13
date	2015.02.06.00.56.35;	author -;	state -;
branches;
next	1.12;

1.12
date	2015.02.06.00.55.57;	author -;	state -;
branches;
next	1.11;

1.11
date	2015.02.05.23.58.45;	author -;	state -;
branches;
next	1.10;

1.10
date	2015.02.05.23.56.19;	author -;	state -;
branches;
next	1.9;

1.9
date	2015.02.05.23.55.30;	author -;	state -;
branches;
next	1.8;

1.8
date	2015.02.05.23.51.45;	author -;	state -;
branches;
next	1.7;

1.7
date	2015.02.05.23.50.54;	author -;	state -;
branches;
next	1.6;

1.6
date	2015.02.05.23.49.56;	author -;	state -;
branches;
next	1.5;

1.5
date	2015.02.05.23.48.49;	author -;	state -;
branches;
next	1.4;

1.4
date	2015.02.05.23.47.52;	author -;	state -;
branches;
next	1.3;

1.3
date	2015.02.05.23.34.51;	author -;	state -;
branches;
next	1.2;

1.2
date	2015.02.05.23.33.38;	author -;	state -;
branches;
next	1.1;

1.1
date	2015.02.05.23.31.30;	author -;	state -;
branches;
next	;


desc
@@


1.23
log
@-
@
text
@// $Id: list4.c,v 1.22 2015-02-10 21:31:06-08 - - $
// Author Olexiy Burov, oburov@@ucsc.edu
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>

typedef struct node node;
struct node {
   char *word;
   node *link;
};

// Recursive memory free mechanism.
void free_list(node *head) {
   if (head == NULL) return;
   free_list(head->link);
   free(head);
}

int main (int argc, char **argv) {
   node *head = NULL;
   for (int argi = 0; argi < 5; ++argi) {
      node *node = malloc (sizeof (struct node));
      assert (node != NULL);
      node->word = argv[argi];
      node->link = head;
      head = node;
   }
   for (node *curr = head; curr->link != NULL; curr = curr->link) {
      printf ("%p->node {word=%p->[%s], link=%p}\n",
              curr, curr->word, curr->word, curr->link);
   }

   free_list(head);
   return 0;
}
@


1.22
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.21 2015-02-10 21:29:15-08 - - $
d34 1
a34 7
   node *curr = head;
   while (curr) {
      node *tmp = curr->link;
      free(curr);
      curr = tmp;
   }
//   free_list(head);
@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.20 2015-02-10 21:27:51-08 - - $
d34 1
a34 1
   node *curr = head->link;
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.19 2015-02-10 20:13:09-08 - - $
d35 1
a35 1
   while (curr->link) {
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.18 2015-02-10 20:05:27-08 - - $
d33 8
a40 1
   free_list(head);
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.17 2015-02-06 10:34:32-08 - - $
d14 5
a18 5
//void free_list(node *head) {
//   if (head == NULL) return;
//   free_list(head->link);
//   free(head);
//}
d33 1
a33 7
 //  free_list(head);
   node *curr = head->linkl
   while (curr->link) {
      node *tmp = curr->link;
      free(curr);
      curr = tmp;
   }
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.16 2015-02-05 22:13:00-08 - - $
d14 5
a18 5
void free_list(node *head) {
   if (head == NULL) return;
   free_list(head->link);
   free(head);
}
d33 7
a39 1
   free_list(head);
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.15 2015-02-05 17:49:21-08 - - $
d5 1
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.14 2015-02-05 16:58:12-08 - - $
d33 1
a33 1
   return 9;
@


1.14
log
@-
@
text
@d1 2
a2 2
// $Id: list4.c,v 1.13 2015-02-05 16:56:35-08 - - $

d12 1
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.12 2015-02-05 16:55:57-08 - - $
d12 1
a12 1
void free_list(*node head) {
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.11 2015-02-05 15:58:45-08 - - $
d31 1
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: list3.c,v 1.5 2015-02-05 15:28:44-08 - - $
d12 6
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.9 2015-02-05 15:55:30-08 - - $
d21 1
a21 1
   for (node *curr = head; curr->link != NULL; curr = curr.link) {
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.8 2015-02-05 15:51:45-08 - - $
d21 1
a21 1
   for (node *curr = head; curr->link != NULL; free(curr)) {
a23 1
      curr = curr.link;
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.7 2015-02-05 15:50:54-08 - - $
a19 1
      free(node);
d21 1
a21 1
   for (node *curr = head; curr->link != NULL; curr = curr->link) {
d24 1
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.6 2015-02-05 15:49:56-08 - - $
d20 1
a25 1
   free(curr);
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.5 2015-02-05 15:48:49-08 - - $
d25 1
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.4 2015-02-05 15:47:52-08 - - $
a24 2
   free(head);
   free(node);
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.3 2015-02-05 15:34:51-08 - - $
a20 1
   free(node);
d25 2
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.2 2015-02-05 15:33:38-08 - - $
a19 1
      free(node);
d21 1
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.1 2015-02-05 15:31:30-08 - - $
d20 1
d22 1
a22 1
   for (node *curr = head; curr->link != NULL; curr = curr->link, free(curr) {
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: list3.c,v 1.5 2015-02-05 15:28:44-08 - - $
d21 1
a21 1
   for (node *curr = head; curr->link != NULL; curr = curr->link) {
a23 1
      free(curr);
@

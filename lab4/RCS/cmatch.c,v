head	1.6;
access;
symbols;
locks;
comment	@ * @;


1.6
date	2015.02.08.06.55.52;	author -;	state -;
branches;
next	1.5;

1.5
date	2015.02.08.06.15.56;	author -;	state -;
branches;
next	1.4;

1.4
date	2015.02.05.22.46.37;	author -;	state -;
branches;
next	1.3;

1.3
date	2015.02.05.08.34.34;	author -;	state -;
branches;
next	1.2;

1.2
date	2015.02.05.08.19.26;	author -;	state -;
branches;
next	1.1;

1.1
date	2015.02.05.04.56.09;	author -;	state -;
branches;
next	;


desc
@@


1.6
log
@-
@
text
@// Author Olexiy Burov, oburov@@ucsc.edu
//
// $Id: cmatch.c,v 1.5 2015-02-07 22:15:56-08 - - $
// 
// NAME
//      cmatch -- print matching lines from files
//
//      SYNOPSIS
//           cmatch [-iln] string [filename...]
#define _GNU_SOURCE

#include <libgen.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <unistd.h>

const char *program_name = NULL;
int exit_status = EXIT_SUCCESS;
#define STDIN_NAME "-"

// Options implementation from code examples.
typedef struct options {
    bool ignore_case;
    bool filenames_only;
    bool number_lines;
} options ;

// scan_options method merged from the example code.
void scan_options (int argc, char * const *argv, options *opts) {
    opts->ignore_case = false;
    opts->filenames_only = false;
    opts->number_lines = false;
    opterr = false;
    for (;;) {
        int opt = getopt(argc, argv, "iln");
        if (opt == EOF) break;
        switch (opt) {
            case 'i':
                opts->ignore_case = true;
                break;
            case 'l':
                opts->filenames_only = true;
                break;
            case 'n':
                opts->number_lines = true;
                break;
            default:
                exit_status = EXIT_FAILURE;
                fflush(NULL);
                fprintf(stderr, "%s: -%c: invalid option\n",
                        program_name, optopt);
                break;
        }
    }
}

// matches pattern string from the file input
// depending on specified options opts
void match_by_line (FILE *input, const char *filename, options *opts,
                             const char *pattern, int argc) {
    //buffer to read lines in.
    char buffer[1024];
    //boolean flag to keep track whether we found at lead one occurence
    bool found = false;
    for (int linenr = 1;; ++linenr) {
        char *buf = fgets (buffer, sizeof buffer, input);
        if (buf == NULL) break;
        
        // compares strings using strstr or
        // strcasestr depending on -i flag
        bool matched = opts->ignore_case ? strcasestr(buf,pattern):
                                          strstr(buf,pattern);
        if (matched) {
            found = matched;
            // If we don't have -l flag turned on:
            if (!opts->filenames_only) {
               // If multiple files read, then print their names.
               if (argc > 1) printf("%s:",filename);
               // If -n flag specified, print line numbers
               if (opts->number_lines) printf("%d:",linenr);
               // Print the actual line with the pattern in it.
               printf("%s",buf);
            }
        }
    }
    // If there happened to be an occurence of patern
    // and -l flag is specified then just print the filename,
    // supressing the other output.
    if (found && opts->filenames_only) printf("%s\n",filename);
}


int main(int argc, char * const argv[]) {
   program_name = argv[0];
   // in case no arguments were passed - quit with error message:
   if (argc == 1) {
      fprintf(stderr,"Usage: %s [-iln] string [filename...]\n",
              program_name);
      return 1;
   }
    // setting up options
    options opts;
    program_name = basename (argv[0]);
    scan_options(argc, argv, &opts);
    
    // If we are reading the pattern from the stdin:
    if (argc == 2) {
        const char *pattern = argv[1];
        match_by_line(stdin,STDIN_NAME, &opts, pattern,1);
    } else {
        const char *pattern = argv[optind];
        // Open all the specified files
        for (int argi = optind + 1; argi < argc; ++argi) {
            const char *filename = argv[argi];
                FILE *input = fopen (filename, "r");
                if (input != NULL) {
                    // match by line each file.
                    // count variable just tells how many files we read
                    int count = argc - (optind + 1);
                    match_by_line(input,filename,&opts,pattern,count);
                    fclose(input);
                } else {
                    exit_status = EXIT_FAILURE;
                    fflush (NULL);
                    fprintf(stderr, "%s: %s: %s\n", program_name,
                            filename, strerror(errno));
                    fflush(NULL);
                }
        }
    }
    return exit_status;
}

@


1.5
log
@-
@
text
@d3 1
a3 1
// $Id: cmatch.c,v 1.4 2015-02-05 14:46:37-08 - - $
d98 1
d100 2
a101 1
      fprintf(stderr,"Usage: %s [-iln] string [filename]\n",program_name);
@


1.4
log
@-
@
text
@d2 2
a9 3
//
// $Id: cmatch.c,v 1.3 2015-02-05 00:34:34-08 - - $

d97 5
@


1.3
log
@-
@
text
@d9 3
a11 1
// $Id: cmatch.c,v 1.2 2015-02-05 00:19:26-08 - - $
d21 1
a21 1
char *program_name = NULL;
d33 1
a33 1
void scan_options (int argc, char **argv, options *opts) {
d63 2
a64 2
void match_by_line (FILE *input, char *filename, options *opts,
                             char *pattern, int argc) {
d97 1
a97 1
int main(int argc, const char * argv[]) {
d105 1
a105 1
        char *pattern = argv[1];
d108 1
a108 1
        char *pattern = argv[optind];
d111 1
a111 1
            char *filename = argv[argi];
@


1.2
log
@-
@
text
@d1 4
d6 2
a7 5
//  main.c
//  cmatch
//  printf
//  Created by Olexiy Burov on 2/4/15.
//  Copyright (c) 2015 test. All rights reserved.
d9 1
a9 1
// $Id: cmatch.c,v 1.1 2015-02-04 20:56:09-08 - - $
d23 1
d30 1
d59 3
a61 1
void catbyline (FILE *input, char *filename, options *opts,
d63 1
d65 1
d71 2
d77 1
d79 1
d81 1
d83 1
d88 3
d96 1
d101 1
d104 1
a104 1
        catbyline (stdin,STDIN_NAME, &opts, pattern,1);
d107 1
d112 2
d115 1
a115 1
                    catbyline (input,filename,&opts,pattern,count);
a125 1
    //PRINTF
@


1.1
log
@-
@
text
@d4 1
a4 1
//
d8 1
a8 1
// $Id$
d57 1
a57 1
                                             char *pattern) {
d59 1
d63 10
a72 37
        switch (opts->filenames_only) {
            case true:
                switch (opts->ignore_case) {
                    case true:
                        if (strcasestr(buf,pattern)) {
                            printf("%s\n",filename);
                            return;
                        }
                        break;
                    case false:
                        if (strstr(buf,pattern)) {
                            printf("%s\n",filename);
                            return;
                        }
                        break;
                }
                break;
            case false:
                switch (opts->ignore_case) {
                    case true:
                        if (strcasestr(buf, pattern)) {
                            if (opts->number_lines == true) {
                                printf ("%d:",linenr);
                            }
                            printf("%s",buf);
                        }
                        break;
                    case false:
                        if (strstr(buf, pattern)) {
                            if (opts->number_lines == true) {
                                printf ("%d:",linenr);
                            }
                            printf("%s:%s",filename,buf);
                        }
                        break;
                }
                break;
d75 1
d86 1
a86 1
        catbyline (stdin,STDIN_NAME, &opts, pattern);
d93 2
a94 1
                    catbyline (input,filename,&opts,pattern);
@

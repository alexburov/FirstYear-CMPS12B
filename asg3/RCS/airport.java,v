head	1.33;
access;
symbols;
locks;
comment	@# @;


1.33
date	2015.02.18.03.23.47;	author -;	state -;
branches;
next	1.32;

1.32
date	2015.02.18.03.04.02;	author -;	state -;
branches;
next	1.31;

1.31
date	2015.02.18.02.55.36;	author -;	state -;
branches;
next	1.30;

1.30
date	2015.02.16.01.07.33;	author -;	state -;
branches;
next	1.29;

1.29
date	2015.02.16.01.03.29;	author -;	state -;
branches;
next	1.28;

1.28
date	2015.02.16.00.25.30;	author -;	state -;
branches;
next	1.27;

1.27
date	2015.02.16.00.23.24;	author -;	state -;
branches;
next	1.26;

1.26
date	2015.02.16.00.22.21;	author -;	state -;
branches;
next	1.25;

1.25
date	2015.02.15.04.10.12;	author -;	state -;
branches;
next	1.24;

1.24
date	2015.02.15.04.09.28;	author -;	state -;
branches;
next	1.23;

1.23
date	2015.02.15.04.08.30;	author -;	state -;
branches;
next	1.22;

1.22
date	2015.02.15.04.07.01;	author -;	state -;
branches;
next	1.21;

1.21
date	2015.02.15.04.05.31;	author -;	state -;
branches;
next	1.20;

1.20
date	2015.02.15.04.00.25;	author -;	state -;
branches;
next	1.19;

1.19
date	2015.02.15.03.59.55;	author -;	state -;
branches;
next	1.18;

1.18
date	2015.02.15.03.57.28;	author -;	state -;
branches;
next	1.17;

1.17
date	2015.02.15.03.56.15;	author -;	state -;
branches;
next	1.16;

1.16
date	2015.02.12.06.40.19;	author -;	state -;
branches;
next	1.15;

1.15
date	2015.02.12.06.37.22;	author -;	state -;
branches;
next	1.14;

1.14
date	2015.02.12.06.30.04;	author -;	state -;
branches;
next	1.13;

1.13
date	2015.02.12.06.29.36;	author -;	state -;
branches;
next	1.12;

1.12
date	2015.02.07.03.10.05;	author -;	state -;
branches;
next	1.11;

1.11
date	2015.02.07.03.09.13;	author -;	state -;
branches;
next	1.10;

1.10
date	2015.02.07.03.08.22;	author -;	state -;
branches;
next	1.9;

1.9
date	2015.02.07.03.06.12;	author -;	state -;
branches;
next	1.8;

1.8
date	2015.02.07.02.57.31;	author -;	state -;
branches;
next	1.7;

1.7
date	2015.02.07.02.51.26;	author -;	state -;
branches;
next	1.6;

1.6
date	2015.02.07.02.50.12;	author -;	state -;
branches;
next	1.5;

1.5
date	2015.02.07.02.47.17;	author -;	state -;
branches;
next	1.4;

1.4
date	2015.02.07.02.09.47;	author -;	state -;
branches;
next	1.3;

1.3
date	2015.02.07.02.09.05;	author -;	state -;
branches;
next	1.2;

1.2
date	2015.02.07.02.07.51;	author -;	state -;
branches;
next	1.1;

1.1
date	2015.02.07.02.02.02;	author -;	state -;
branches;
next	;


desc
@@


1.33
log
@-
@
text
@// $Id: airport.java,v 1.32 2015-02-17 19:04:02-08 - - $
// Author Olexiy Burov, oburov@@ucsc.edu

import java.io.*;
import java.util.Scanner;
import static java.lang.System.*;

class airport {
   // Loads database from the file.
   private static treemap load_database(String database_name) {
      // Create new binary search tree
      treemap tree = new treemap();
      try {
         // Try opening the file into Scanner
         Scanner database = new Scanner(new File(database_name));
         // Read it line by line, tracking the line numbers
         for (int linenr = 1; database.hasNextLine(); linenr++) {
            String line = database.nextLine();
            // Make sure it's in the correct format
            if (line.matches ("^\\s*(#.*)?$")) continue;
            String[] keyvalue = line.split (":");
            if (keyvalue.length != 2) {
               misc.warn (database_name , linenr, "invalid line");
               continue;
            }
            // Put the value to the binary search tree.
            tree.put(keyvalue[0],keyvalue[1]);
         }
         // Stop reading from the file.
         database.close();
      } catch (IOException error) {
         misc.die(error.getMessage());
      }
      return tree;
   }

   public static void main (String[] args) {
      // First, check for options in the arguments.
      if (args.length == 2 && args[0].startsWith("-")) {
         // If "-d" option is found, load
         // the databse and print it in debug format.
         if (args[0].equals("-d")) {
            treemap tree = load_database(args[1]);
            tree.debug_tree();
         } else {
            misc.die(args[0], "Invalid option");
         }
      } else if (args.length > 2 || args.length < 1) {
         misc.die(String.format("Usage: %s [-d] database",
                                      misc.program_name));
      } else {
         // If there is one argument, try to load it to the tree,
         // assuming that's the databse.
         treemap tree = load_database(args[0]);
         Scanner stdin = new Scanner(in);
         // Then start scanning System.in for
         // user entered airport codes
         while (stdin.hasNextLine()) {
            String airport = stdin.nextLine().toUpperCase().trim();

            // Disregard coments in test input files
            if (airport.matches ("^\\s*(#.*)?$")) continue;
            
            // Look for the airport in the binary tree. 
            String airport_name = tree.get(airport);
            // If not found print an error.
            if (airport_name == null) {
               misc.warn(airport,"no such airport");
            } else { // Print the found airport name.
               out.printf("%s = %s%n", airport, airport_name);
            }
         }
      }
      exit(misc.exit_status);
   }
}
@


1.32
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.30 2015/02/16 01:07:33 - - $
a63 5
            // If code is of wrong length, print an error and continue
            if (airport.length() > 3) {
                misc.warn("invalid airport code",airport);
                continue;
            }
@


1.31
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.30 2015-02-15 17:07:33-08 - - $
d64 5
@


1.30
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.28 2015-02-15 16:25:30-08 - - $
a63 5
            // If code is of wrong length, print an error and continue
            if (airport.length() != 3) {
                misc.warn("invalid airport code",airport);
                continue;
            }
@


1.29
log
@-
@
text
@d32 1
a32 1
         misc.warn(error.getMessage());
d73 1
a73 1
               err.printf("%s: no such airport%n", airport);
@


1.28
log
@-
@
text
@d1 2
a2 1
// $Id: airport.java,v 1.27 2015-02-15 16:23:24-08 - - $
d9 1
d11 1
d14 1
d16 1
d19 1
d26 1
d29 1
d38 1
d40 2
d52 2
d56 2
d61 1
d64 3
a66 2
            if (airport.length() > 3) {
                misc.warn("invalid line",airport);
d69 1
a69 1
             
d71 1
d74 1
a74 1
            } else {
@


1.27
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.26 2015-02-15 16:22:21-08 - - $
d30 1
a30 1
      if (args.length == 2) {
@


1.26
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.25 2015-02-14 20:10:12-08 - - $
d38 2
a39 1
         misc.die(String.format("Usage: %s [-d] database",misc.program_name));
@


1.25
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.24 2015-02-14 20:09:28-08 - - $
d30 1
a30 1
      if (args.length == 2 && args[0].equals("-d")) {
d38 1
a38 1
         misc.die(String.format("Usage: [-d] %s",misc.program_name));
a41 1
         int linenr = 0;
a43 1
            linenr++;
d48 1
a48 1
                misc.warn(linenr,"invalid line",airport);
@


1.24
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.23 2015-02-14 20:08:30-08 - - $
d42 1
a42 1
         int linenr = 1;
@


1.23
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.22 2015-02-14 20:07:01-08 - - $
d50 1
a50 1
                misc.warn(linenr,airport,"invalid line");
@


1.22
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.21 2015-02-14 20:05:31-08 - - $
d50 1
a50 1
                misc.warn(args[0],linenr,"invalid line");
@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.20 2015-02-14 20:00:25-08 - - $
d50 1
a50 1
                misc.warn(linenr,"invalid line");
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.19 2015-02-14 19:59:55-08 - - $
d42 1
d45 1
d50 1
a50 1
                misc.warn("Invalid line");
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.18 2015-02-14 19:57:28-08 - - $
d38 1
a38 1
         misc.die(String.format("Usage: [-d] %s%n",misc.program_name));
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.17 2015-02-14 19:56:15-08 - - $
d38 1
a38 1
         misc.die("Usage:",misc.program_name);
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.12 2015-02-06 19:10:05-08 - - $
d38 1
a38 1
         misc.die("Usage: %s [-d] database%n",misc.program_name);
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.15 2015-02-11 22:37:22-08 - - $
d24 1
a24 1
         misc.die(error.getMessage());
d31 6
a36 2
         treemap tree = load_database(args[1]);
         tree.debug_tree();
d38 2
a39 3
         err.printf("Usage: %s [-d] database%n",misc.program_name);
         exit(1);
      } else { 
d42 1
a42 1
         for (int linenr = 1; stdin.hasNextLine(); linenr++) {
d48 1
a48 1
                misc.warn(args[0], linenr, "invalid line");
d54 1
a54 2
               misc.warn(String.format("%s: no such airport%n",
                                       airport));
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.14 2015-02-11 22:30:04-08 - - $
d51 2
a52 1
               misc.warn(String.format("%s: no such airport%n", airport));
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.13 2015-02-11 22:29:36-08 - - $
d24 1
a24 1
         misc.warn(error.getMessage());
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.12 2015-02-06 19:10:05-08 - - $
d45 1
a45 1
                misc.warn(argv[0], linenr, "invalid line");
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.11 2015-02-06 19:09:13-08 - - $
d39 1
a39 1
         while (stdin.hasNextLine()) {
d45 1
a45 1
                misc.warn("Invalid line");
d51 1
a51 1
               out.printf("%s: no such airport%n", airport);
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.10 2015-02-06 19:08:22-08 - - $
d44 4
a47 1
            if (airport.length() > 3) misc.warn("Invalid line");
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.9 2015-02-06 19:06:12-08 - - $
d44 1
a44 3
            out.println(airport.length);

            if (airport.length > 3) misc.warn("Invalid line");
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.8 2015-02-06 18:57:31-08 - - $
d44 2
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.7 2015-02-06 18:51:26-08 - - $
d43 3
a45 1

@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.6 2015-02-06 18:50:12-08 - - $
d41 3
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.5 2015-02-06 18:47:17-08 - - $
d33 1
a33 1
      } else if (args.length > 2) {
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.4 2015-02-06 18:09:47-08 - - $
d33 3
a47 2
         err.printf("Usage: %s [-d] database%n",misc.program_name);
         exit(1);
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.3 2015-02-06 18:09:05-08 - - $
d30 4
a33 1
      if (args.length == 1) {
a44 4
      } else if (args.length == 2 && args[0].equals("-d")) {
         treemap tree = load_database(args[1]);
         tree.debug_tree();
      } else { 
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.2 2015-02-06 18:07:51-08 - - $
d46 1
a46 1
         err.printf("Usage: %s [-d] databse",misc.program_name);
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.1 2015-02-06 18:02:02-08 - - $
d45 4
a48 1
      } else misc.die("Usage: %s [-d] databse",misc.program_name);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: airport.java,v 1.2 2013-01-31 17:00:19-08 - - $
d45 1
a45 1
      }
@
